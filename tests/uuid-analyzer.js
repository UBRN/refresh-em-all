#!/usr/bin/env node

/**
 * UUID Analyzer for Refresh-Em-All Extension
 * 
 * This tool analyzes UUIDs found in error messages or logs and helps determine 
 * their source, meaning, and potential issues.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// UUID validation pattern
const UUID_REGEX = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/gi;

// Known UUID prefixes and their meaning
const UUID_PATTERNS = [
  {
    pattern: /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
    source: 'generateUuid() (background.js)',
    description: 'Standard v4 UUID generated by the extension',
    possibleCause: null,
    solution: null
  },
  {
    pattern: /^e[0-9a-f]{7}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
    source: 'Error reporting system',
    description: 'Error ID for tracking extension errors',
    possibleCause: 'Look for associated error in logs or error reports',
    solution: 'Check error reporting system for details'
  },
  {
    pattern: /^r[0-9a-f]{7}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
    source: 'Refresh operation',
    description: 'ID for a batch refresh operation',
    possibleCause: null,
    solution: null
  },
  {
    pattern: /^s[0-9a-f]{7}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
    source: 'Session tracking',
    description: 'Session identifier for user activity',
    possibleCause: null,
    solution: null
  }
];

/**
 * Analyzes a UUID and returns information about it
 */
function analyzeUuid(uuid) {
  if (!uuid) return { valid: false, message: 'No UUID provided' };
  
  // Normalize
  uuid = uuid.toLowerCase();
  
  // Validate format
  if (!uuid.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)) {
    return { 
      valid: false, 
      message: 'Invalid UUID format' 
    };
  }
  
  // Check version
  const version = uuid.charAt(14);
  let versionInfo = '';
  
  if (version === '4') {
    versionInfo = 'Version 4 (random)';
  } else if (version === '1') {
    versionInfo = 'Version 1 (time-based)';
  } else if (version === '3') {
    versionInfo = 'Version 3 (MD5 namespace)';
  } else if (version === '5') {
    versionInfo = 'Version 5 (SHA-1 namespace)';
  } else {
    versionInfo = `Version ${version} (non-standard)`;
  }
  
  // Check variant
  const variantBit = parseInt(uuid.charAt(19), 16);
  let variantInfo = '';
  
  if ((variantBit & 0x8) === 0x8) {
    if ((variantBit & 0x4) === 0) {
      variantInfo = 'Variant 1 (RFC 4122)';
    } else if ((variantBit & 0x2) === 0) {
      variantInfo = 'Variant 2 (Microsoft GUID)';
    } else {
      variantInfo = 'Variant 3 (Reserved)';
    }
  } else {
    variantInfo = 'Variant 0 (NCS)';
  }
  
  // Check for known patterns
  const matchingPatterns = UUID_PATTERNS.filter(p => uuid.match(p.pattern));
  
  if (matchingPatterns.length > 0) {
    const pattern = matchingPatterns[0];
    return {
      valid: true,
      uuid,
      version: versionInfo,
      variant: variantInfo,
      source: pattern.source,
      description: pattern.description,
      possibleCause: pattern.possibleCause,
      solution: pattern.solution
    };
  }
  
  return {
    valid: true,
    uuid,
    version: versionInfo,
    variant: variantInfo,
    source: 'Unknown',
    description: 'No matching pattern found',
    possibleCause: null,
    solution: null
  };
}

/**
 * Loads stress test results from file
 */
function loadStressTestResults(filePath) {
  try {
    const data = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error(`Error loading stress test results: ${error.message}`);
    return null;
  }
}

/**
 * Finds UUIDs in stress test results
 */
function findUuidsInStressResults(results) {
  if (!results) return [];
  
  const uuids = new Set();
  const stringified = JSON.stringify(results);
  const matches = stringified.match(UUID_REGEX) || [];
  
  matches.forEach(uuid => uuids.add(uuid));
  return Array.from(uuids);
}

/**
 * Main function
 */
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
    console.log('\nUUID Analyzer for Refresh-Em-All Extension');
    console.log('=======================================\n');
    console.log('Usage:');
    console.log('  npm run analyze-uuid [options] [uuid...]\n');
    console.log('Options:');
    console.log('  --stress-results <file>  Analyze UUIDs from stress test results file');
    console.log('  --help, -h               Show this help message\n');
    console.log('Examples:');
    console.log('  npm run analyze-uuid 123e4567-e89b-12d3-a456-426614174000');
    console.log('  npm run analyze-uuid --stress-results ./tests/stress/results.json\n');
    return;
  }
  
  // Process arguments
  let uuidsToAnalyze = [];
  let stressResultsFile = null;
  
  for (let i = 0; i < args.length; i++) {
    if (args[i] === '--stress-results') {
      stressResultsFile = args[++i];
    } else if (args[i].match(UUID_REGEX)) {
      uuidsToAnalyze.push(args[i]);
    }
  }
  
  // If stress results file is provided, load UUIDs from it
  if (stressResultsFile) {
    const stressTestPath = path.resolve(process.cwd(), stressResultsFile);
    console.log(`\nLoading stress test results from: ${stressTestPath}`);
    
    const results = loadStressTestResults(stressTestPath);
    if (results) {
      const foundUuids = findUuidsInStressResults(results);
      console.log(`Found ${foundUuids.length} UUIDs in stress test results\n`);
      uuidsToAnalyze = [...uuidsToAnalyze, ...foundUuids];
    }
  }
  
  // If no UUIDs provided or found, prompt user to enter one
  if (uuidsToAnalyze.length === 0) {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const uuid = await new Promise(resolve => {
      rl.question('\nEnter a UUID to analyze: ', answer => {
        rl.close();
        resolve(answer.trim());
      });
    });
    
    if (uuid) uuidsToAnalyze.push(uuid);
  }
  
  // Analyze each UUID
  if (uuidsToAnalyze.length > 0) {
    console.log(`\nAnalyzing ${uuidsToAnalyze.length} UUID(s):\n`);
    
    uuidsToAnalyze.forEach(uuid => {
      const analysis = analyzeUuid(uuid);
      
      if (!analysis.valid) {
        console.log(`${uuid}: ${analysis.message}`);
        return;
      }
      
      console.log(`UUID: ${analysis.uuid}`);
      console.log(`Type: ${analysis.version}, ${analysis.variant}`);
      console.log(`Source: ${analysis.source}`);
      console.log(`Description: ${analysis.description}`);
      
      if (analysis.possibleCause) {
        console.log(`Possible Cause: ${analysis.possibleCause}`);
      }
      
      if (analysis.solution) {
        console.log(`Solution: ${analysis.solution}`);
      }
      
      console.log(''); // Empty line between UUIDs
    });
  } else {
    console.log('\nNo UUIDs to analyze');
  }
}

main().catch(error => {
  console.error(`Error: ${error.message}`);
  process.exit(1);
}); 